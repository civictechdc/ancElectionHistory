geom_point(aes(size=2)) +
transition_states(trial,transition_length=1,state_length=2) +
labs(title='Trial: {closest_state}') + shadow_mark(alpha = 0.6, size = 1)
animate(process1TsneTrainingAnime,nframes=3*totalProfilesPerType)
#A function accomplishes all of the work of training the model, and knows something about the structure we want to use, so we send in our data
require(keras)
require(tensorflow)
#install_keras()
process1KerasModel <- trainKerasModel(process1TrainingImagesInRows)
#We'll test our training data here.
process1SelfTestPrediction <-
testKerasModel(process1TrainingImagesInRows,process1KerasModel)
process1SelfTestPrediction %>% ggplot(aes(truth)) + geom_bar(aes(fill=correct))
process1SelfTestPrediction %>% ggplot(aes(predict)) + geom_bar(aes(fill=correct))
trialBins <- c(31,61,91,121,151)
process1SelfTestPrediction %<>% mutate(trialBin = case_when(trial<trialBins[1] ~ 1,
trial<trialBins[2] ~ 2,
trial<trialBins[3] ~ 3,
trial<trialBins[4] ~ 4,
trial<trialBins[5] ~ 5))
process1SelfTestPrediction %>% ggplot(aes(truth)) + geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
process1SelfTestPrediction %>% ggplot(aes(predict)) + geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
#require(ggalluvial)
#Not using this style
# ggplot(process1Alluvial3,
#        aes(y = value, axis1=truth,axis2 = trialBin, axis3=predict)) +
#   geom_alluvium(aes(fill = correct), width = 1/12) +
#   geom_stratum(width = 1/12, fill = "black", color = "grey") +
#   geom_label(stat = "stratum", label.strata = TRUE)
process1TrainingAlluvial <- process1SelfTestPrediction %>%
mutate(truth=as.factor(truth),
predict=as.factor(predict),
trialBin=as.factor(trialBin)) %>%
group_by(truth, predict,trialBin) %>%
summarise(n()) %>% rename(value = 'n()') %>%
mutate(correct=ifelse(truth==predict,'good','bad')) %>%
gather_set_data(c(1:3))
process1TrainingAlluvial %>% ggplot(aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = correct), alpha = 0.3, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
numProfilesPerTimeBin_test = c(5,5,5,5,5)
process1TestDataTable <- generateSamples(process1GPs,
typeNames,
maxTimesForBins,
numProfilesPerTimeBin_test,
numPointsPerFrofileRanges)
#A little side number we need to store for later is the length and index of the longest trial in our training set.
maxLengthTestTrial <- process1TestDataTable %>% filter(type==typeNames[1]) %>%
group_by(trial) %>% summarise(n()) %>% top_n(n = 1)
process1TestDataPlot <-
process1TestDataTable %>% mutate(trial=as.factor(trial))  %>%
ggplot(aes(x=time,y=value,color=type)) + geom_point() +
transition_states(trial,transition_length=1,state_length=2) +
labs(title='Trial: {closest_state}')
animate(process1TestDataPlot,nframes=3*sum(numProfilesPerTimeBin_test))
totalProfilesPerType_test = sum(numProfilesPerTimeBin_test)
process1TestdldtData <- convertSamplesToDValDt(process1TestDataTable,
typeNames,
totalProfilesPerType_test)
process1DldtTestImages <- createImages(process1TestdldtData,
typeNames,
totalProfilesPerType_test,
limits,
bins)
process1DldtTestImages %>% ggplot(aes(x,y)) + geom_raster(aes(fill=value)) +
facet_wrap(~type) + transition_states(trial,transition_length=1,state_length=2) +
labs(title='Trial: {closest_state}')
process1TestImagesInRows <- widenImageDataFrame(process1DldtTestImages,numPixels)
process1OutOfSampleTestPredictionTable <- testKerasModel(process1TestImagesInRows,
process1KerasModel)
process1OutOfSampleTestPredictionTable %>% ggplot(aes(truth)) +
geom_bar(aes(fill=correct))
process1OutOfSampleTestPredictionTable %>% ggplot(aes(predict)) +
geom_bar(aes(fill=correct))
trialBins <- c(6,11,16,21,26)
process1OutOfSampleTestPredictionTable %<>%
mutate(trialBin = case_when(trial<trialBins[1] ~ 1,
trial<trialBins[2] ~ 2,
trial<trialBins[3] ~ 3,
trial<trialBins[4] ~ 4,
trial<trialBins[5] ~ 5))
process1OutOfSampleTestPredictionTable %>% ggplot(aes(truth)) +
geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
process1OutOfSampleTestPredictionTable %>% ggplot(aes(predict)) +
geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
process1TestAlluvial <- process1OutOfSampleTestPredictionTable %>%
mutate(truth=as.factor(truth),
predict=as.factor(predict),
trialBin=as.factor(trialBin)) %>%
group_by(truth, predict,trialBin) %>%
summarise(n()) %>% rename(value = 'n()') %>%
mutate(correct=ifelse(truth==predict,'good','bad')) %>%
gather_set_data(c(1:3))
process1TestAlluvial %>% ggplot(aes(x, id = id, split = y, value = value)) +
geom_parallel_sets(aes(fill = correct), alpha = 0.3, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.1) +
geom_parallel_sets_labels(colour = 'white')
#select test trial 25 from each of our classes.  We have to go back to the original test data and then build up the dldts and images.
#label the data with a time block index.
timeBlocks <- seq(from=0,to=100,by=10)
longestTestTrial = maxLengthTestTrial$trial
process1TimeSeriesTestInput <- process1TestDataTable %>%
filter(trial == longestTestTrial) %>% select(-trial) %>%
mutate(timeBlock = cut(time,breaks = timeBlocks,labels=FALSE))
process1TimeSeriesTestInputExpanded <-
1:length(timeBlocks) %>% map(.f=function(blockIndex){
process1TimeSeriesTestInput %>% filter(timeBlock <= blockIndex) %>%
mutate(trial=blockIndex) %>% bind_rows()
}) %>% bind_rows() %>% select(-timeBlock)
numTimeSeriesTrials = length(timeBlocks) - 1;
process1TimeSeriesTestdldtData <-
convertSamplesToDValDt(process1TimeSeriesTestInputExpanded,typeNames,numTimeSeriesTrials)
process1TimeSeriesTestdldtImages <-
createImages(process1TimeSeriesTestdldtData,typeNames,numTimeSeriesTrials,limits,bins)
process1TimeSeriesTestImagesInRows <- widenImageDataFrame(process1TimeSeriesTestdldtImages,
numPixels)
process1TimeSeriesTestPredictionTable <-
testKerasModelForProbType(process1TimeSeriesTestImagesInRows,process1KerasModel)
process1TimeSeriesTestPredictionTable %>%
ggplot(aes(x=trial,y=probability,color=predictedType)) + geom_line() +
geom_point() + facet_wrap(~truth)
process2TruthTable <- createTruthData(timeVals,typeNames,createProcess2Funcs(numTypes))
process3TruthTable <- createTruthData(timeVals,typeNames,createProcess3Funcs(numTypes))
process2TruthTable %>% ggplot(aes(x=time,y=value,color=func)) + geom_point() + geom_line()
process3TruthTable %>% ggplot(aes(x=time,y=value,color=func)) + geom_point() + geom_line()
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process3GPs <- fitGaussianProcesses(typeNames,process3SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process3TrainingDataTable <- generateSamples(process3GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2DldtTrainingData <-
convertSamplesToDValDt(process2TrainingDataTable,typeNames,totalProfilesPerType)
process3DldtTrainingData <-
convertSamplesToDValDt(process3TrainingDataTable,typeNames,totalProfilesPerType)
process2TrainingDlDtPlot <-
process2DldtTrainingData %>% filter(trial %in% displayTrials) %>%
ggplot(aes(x=time,y=value,color=type)) + geom_point() + ylim(c(0,150)) +
facet_wrap(~type) + transition_states(trial,transition_length=1,state_length=2) +
labs(title='Trial: {closest_state}')
animate(process2TrainingDlDtPlot,nframes=3*totalProfilesPerType/5)
process3TrainingDlDtPlot <-
process3DldtTrainingData %>% filter(trial %in% displayTrials) %>%
ggplot(aes(x=time,y=value,color=type)) + geom_point() + ylim(c(0,30)) +
facet_wrap(~type) + transition_states(trial,transition_length=1,state_length=2) +
labs(title='Trial: {closest_state}')
animate(process3TrainingDlDtPlot,nframes=3*totalProfilesPerType/5)
process2Limits <- matrix(c(0,0,100,150),2,2)
process3Limits <- matrix(c(0,0,100,30),2,2)
# xPixels = 16
# yPixels = 16
# bins <- c(xPixels,yPixels)
# numPixels = xPixels * yPixels
process2DldtTrainingImages <- createImages(process2DldtTrainingData,typeNames,totalProfilesPerType,process2Limits,bins)
process3DldtTrainingImages <- createImages(process3DldtTrainingData,typeNames,totalProfilesPerType,process3Limits,bins)
process2DldtTrainingImagesPlot <- process2DldtTrainingImages %>% filter(trial %in% displayTrials) %>% ggplot(aes(x,y)) + geom_raster(aes(fill=value)) + facet_wrap(~type) + transition_states(trial,transition_length=1,state_length=2) + labs(title='Trial: {closest_state}')
animate(process2DldtTrainingImagesPlot,nframes=3*totalProfilesPerType/5)
process3DldtTrainingImagesPlot <- process3DldtTrainingImages %>% filter(trial %in% displayTrials) %>% ggplot(aes(x,y)) + geom_raster(aes(fill=value)) + facet_wrap(~type) + transition_states(trial,transition_length=1,state_length=2) + labs(title='Trial: {closest_state}')
animate(process3DldtTrainingImagesPlot,nframes=3*totalProfilesPerType/5)
process2Type1Trial31 = process2DldtTrainingImages %>% filter(type=='truth1',trial==31)
process3Type1Trial31 = process3DldtTrainingImages %>% filter(type=='truth1',trial==31)
type1trial31RGB = process1DldtTrainingImages %>% filter(type=='truth1',trial==31)  %>%
mutate(value2 = process2Type1Trial31$value,value3 = process3Type1Trial31$value) %>%
mutate(value = value/256,value2 = value2/256,value3=value3/256) %>%
mutate(rgb.val=rgb(value,value2,value3))
process2Type3Trial81 = process2DldtTrainingImages %>% filter(type=='truth3',trial==81)
process3Type3Trial81 = process3DldtTrainingImages %>% filter(type=='truth3',trial==81)
type3trial81RGB = process1DldtTrainingImages %>% filter(type=='truth3',trial==81)  %>%
mutate(value2 = process2Type3Trial81$value,value3 = process3Type3Trial81$value) %>%
mutate(value = value/256,value2 = value2/256,value3=value3/256) %>%
mutate(rgb.val=rgb(value,value2,value3))
type1trial31RGB %>% ggplot(aes(x,y))+geom_raster(aes(fill=rgb.val))+scale_fill_identity()
type3trial81RGB %>% ggplot(aes(x,y))+geom_raster(aes(fill=rgb.val))+scale_fill_identity()
process2TrainingImagesInRows <-
widenImageDataFrame(process2DldtTrainingImages,numPixels) %>% select(-c(trial,type))
process3TrainingImagesInRows <-
widenImageDataFrame(process3DldtTrainingImages,numPixels) %>% select(-c(trial,type))
rgbTrainingImagesInRows <-
bind_cols(process1TrainingImagesInRows,
process2TrainingImagesInRows,
process3TrainingImagesInRows)
rgbKerasModel <- trainKerasModel(rgbTrainingImagesInRows)
#We'll test our training data here.
rgbSelfTestPredictionTable <- testKerasModel(rgbTrainingImagesInRows,rgbKerasModel)
rgbSelfTestPredictionTable %>% ggplot(aes(truth)) + geom_bar(aes(fill=correct))
rgbSelfTestPredictionTable %>% ggplot(aes(predict)) + geom_bar(aes(fill=correct))
trialBins <- c(31,61,91,121,151)
rgbSelfTestPredictionTable %<>% mutate(trialBin = case_when(trial<trialBins[1] ~ 1,
trial<trialBins[2] ~ 2,
trial<trialBins[3] ~ 3,
trial<trialBins[4] ~ 4,
trial<trialBins[5] ~ 5))
rgbSelfTestPredictionTable %>% ggplot(aes(truth)) + geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
rgbSelfTestPredictionTable %>% ggplot(aes(predict)) + geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
process2TestDataTable <-
generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin_test,numPointsPerFrofileRanges)
process3TestDataTable <-
generateSamples(process3GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin_test,numPointsPerFrofileRanges)
process2TestdldtData <-
convertSamplesToDValDt(process2TestDataTable,typeNames,totalProfilesPerType_test)
process3TestdldtData <-
convertSamplesToDValDt(process3TestDataTable,typeNames,totalProfilesPerType_test)
process2DldtTestImages <- createImages(process2TestdldtData,
typeNames,
totalProfilesPerType_test,
process2Limits,
bins)
process3DldtTestImages <- createImages(process3TestdldtData,
typeNames,
totalProfilesPerType_test,
process3Limits,
bins)
process2TestImagesInRows <-
widenImageDataFrame(process2DldtTestImages,numPixels) %>% select(-c(trial,type))
process3TestImagesInRows <-
widenImageDataFrame(process3DldtTestImages,numPixels) %>% select(-c(trial,type))
rgbTestImagesInRows <- bind_cols(process1TestImagesInRows,
process2TestImagesInRows,
process3TestImagesInRows)
rgbTestPredictionTable <- testKerasModel(rgbTestImagesInRows,rgbKerasModel)
rgbTestPredictionTable %>% ggplot(aes(truth)) + geom_bar(aes(fill=correct))
rgbTestPredictionTable %>% ggplot(aes(predict)) + geom_bar(aes(fill=correct))
trialBins <- c(6,11,16,21,26)
rgbTestPredictionTable %<>% mutate(trialBin = case_when(trial<trialBins[1] ~ 1,
trial<trialBins[2] ~ 2,
trial<trialBins[3] ~ 3,
trial<trialBins[4] ~ 4,
trial<trialBins[5] ~ 5))
rgbTestPredictionTable %>% ggplot(aes(truth)) + geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
rgbTestPredictionTable %>% ggplot(aes(predict)) + geom_bar(aes(fill=correct)) + facet_wrap(~trialBin)
#select test trial 25 from each of our classes.  We have to go back to the original test data and then build up the dldts and images.
process2TimeSeriesTestInput <- process2TestDataTable %>%
filter(trial == longestTestTrial) %>% select(-trial)
process3TimeSeriesTestInput <- process3TestDataTable %>%
filter(trial == longestTestTrial) %>% select(-trial)
process2TimeSeriesTestInput %<>%
mutate(timeBlock = cut(time,breaks = timeBlocks,labels=FALSE))
process3TimeSeriesTestInput %<>%
mutate(timeBlock = cut(time,breaks = timeBlocks,labels=FALSE))
process2TimeSeriesTestInputExpanded <-
1:length(timeBlocks) %>% map(.f=function(blockIndex){
process2TimeSeriesTestInput %>% filter(timeBlock <= blockIndex) %>%
mutate(trial=blockIndex) %>% bind_rows()
}) %>% bind_rows() %>% select(-timeBlock)
process3TimeSeriesTestInputExpanded <-
1:length(timeBlocks) %>% map(.f=function(blockIndex){
process3TimeSeriesTestInput %>% filter(timeBlock <= blockIndex) %>%
mutate(trial=blockIndex) %>% bind_rows()
}) %>% bind_rows() %>% select(-timeBlock)
process2TimeSeriesTestdldtData <-
convertSamplesToDValDt(process2TimeSeriesTestInputExpanded,typeNames,numTimeSeriesTrials)
process3TimeSeriesTestdldtData <-
convertSamplesToDValDt(process3TimeSeriesTestInputExpanded,typeNames,numTimeSeriesTrials)
process2TimeSeriesTestdldtImages <-
createImages(process2TimeSeriesTestdldtData,typeNames,numTimeSeriesTrials,process2Limits,bins)
process3TimeSeriesTestdldtImages <-
createImages(process3TimeSeriesTestdldtData,typeNames,numTimeSeriesTrials,process3Limits,bins)
process2TimeSeriesTestImagesInRows <-
widenImageDataFrame(process2TimeSeriesTestdldtImages,numPixels) %>%
select(-c(trial,type))
process3TimeSeriesTestImagesInRows <-
widenImageDataFrame(process3TimeSeriesTestdldtImages,numPixels) %>%
select(-c(trial,type))
rgbTimeSeriesTestImagesInRows <- bind_cols(process1TimeSeriesTestImagesInRows,
process2TimeSeriesTestImagesInRows,
process3TimeSeriesTestImagesInRows)
rgbTimeSeriesTestPredictionTable <-
testKerasModelForProbType(rgbTimeSeriesTestImagesInRows,rgbKerasModel)
rgbTimeSeriesTestPredictionTable %>% ggplot(aes(x=trial,y=probability,color=predictedType)) + geom_line() + geom_point() + facet_wrap(~truth)
View(process2GPs)
view(process2GPs[[1]])
view(process2GPs[[1]]$Kinv)
view(process2GPs[[2]]$Kinv)
view(process2GPs[[3]]$Kinv)
view(process2GPs[[4]]$Kinv)
view(process3GPs[[4]]$Kinv)
view(process3GPs[[3]]$Kinv)
view(process3GPs[[2]]$Kinv)
view(process3GPs[[1]]$Kinv)
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process3GPs <- fitGaussianProcesses(typeNames,process3SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process3TrainingDataTable <- generateSamples(process3GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,60,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,70,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,100,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
numToKeep
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,40,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,40,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 1.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,40,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2Noise = 0.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,num2Keep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process2Noise = 0.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2Noise = 5.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
process2Noise = 5.0
process3Noise = 1.0
process2SampledTable <-
downSampleTruthPoints(process2TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process2Noise))
process3SampledTable <-
downSampleTruthPoints(process3TruthTable,numToKeep,typeNames,timeVals) %>%
mutate(noiseValue = value + rnorm(n(),0,process3Noise))
process2GPs <- fitGaussianProcesses(typeNames,process2SampledTable)
process2TrainingDataTable <- generateSamples(process2GPs,typeNames,maxTimesForBins,numProfilesPerTimeBin,numPointsPerFrofileRanges)
shiny::runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
inputData = read_csv('C:\Users\dsrat\workspace\opendatadc\docs\analyses\anc\dataTool\ancDataTool\election_history.csv')
inputData = read_csv('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool/election_history.csv')
inputData = read_csv('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool/election_history_R.csv')
glimpse(inputData)
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
runApp('C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool')
shiny::runApp(display.mode="showcase")
getwd()
setwd("C:/Users/dsrat/workspace/opendatadc/docs/analyses/anc/dataTool/ancDataTool")
shiny::runApp(display.mode="showcase")
runApp()
glimpse(inputData)
glimpse(electionHistoryTable)
ward
input$ward
anc
glimpse(reducedTable)
choice_anc
input$ward
input$anc
input$ward
input$anc
ward
input
input$`ward-selectized`
output$ns
output$impl
input$ward
electionHistoryTable %>% filter(ward==input$ward) %>% pull(anc) %>% as.character()
electionHistoryTable %>% filter(ward==input$ward)
runApp()
runApp()
input
output
input$wardSelection
input
nrow(electionHistoryTable)
nrow(reducedTable)
nrow(electionHistoryTable)
nrow(reducedTable)
input$wardSelection
input
runApp()
runApp()
runApp()
nrow(electionHistoryTable)
input$wardSelection
input$wardSelection
input$`wardSelection-selectized`
input$wardSelection-selectized
choice_anc
levels(choice_anc())
levels(electionHistoryTable$ward)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
source('imageFunctions.R')
source('helperFunctions.R')
require(tibble)
require(dplyr)
require(magrittr)
require(ggplot2)
require(tidyr)
require(purrr)
typeNames = c('truth1','truth2','truth3','truth4')
numTypes = length(typeNames)
timeVals = 0:100
numTimes = length(timeVals)
process1TruthTable <- createTruthData(timeVals,typeNames,createProcess1Funcs(numTypes))
process1TruthTable %>% ggplot(aes(x=time,y=value,color=func)) + geom_point() + geom_line()
numToKeep = 50
sampleNoise = 0.01
sampledTable <- downSampleTruthPoints(process1TruthTable,numToKeep,typeNames,timeVals)
sampledTable %<>% mutate(noiseValue = value + rnorm(n(),0,sampleNoise))
sampledTable %>% ggplot(aes(x=time,y=value,color=func)) + geom_point() + geom_line()
sampledTable %>% ggplot(aes(x=time,y=noiseValue,color=func)) + geom_point()
process1GPs <- fitGaussianProcesses(typeNames,sampledTable)
gpPredictions <- createGaussianProcessPredictions(process1GPs,typeNames,timeVals)
gpPredictions %>% ggplot(aes(x=time,y=mean,color=type)) + geom_line() + geom_linerange(aes(ymin=lower,ymax=upper))
maxTimesForBins = c(20,40,60,80,100)
numProfilesPerTimeBin = c(30,30,30,30,30)
numPointsPerProfileRanges = list(4:10,8:20,12:30,16:40,20:50)
process1TrainingData <-
generateSamples(process1GPs,
typeNames,
maxTimesForBins,
numProfilesPerTimeBin,
numPointsPerFrofileRanges)
require(gganimate)
require(gifski)
process1TrainingDataPlot <- process1TrainingData %>% mutate(trial=as.factor(trial))  %>% ggplot(aes(x=time,y=value,color=type)) + geom_point() + transition_states(trial,transition_length=1,state_length=2) + labs(title='Trial: {closest_state}')
animate(process1TrainingDataPlot,nframes=3*sum(numProfilesPerTimeBin))
trainingTrials = seq(1,50,by=5)
process1TrainingDataPlot <- process1TrainingData %>% mutate(trial=as.factor(trial))  %>% filter(trial %in% trainingTrials) %>% ggplot(aes(x=time,y=value,color=type)) + geom_point() + facet_wrap(~trial)
trainingTrials = seq(1,50,by=5)
process1TrainingDataPlot <- process1TrainingData %>% mutate(trial=as.factor(trial))  %>% filter(trial %in% trainingTrials) %>% ggplot(aes(x=time,y=value,color=type)) + geom_point() + facet_wrap(~trial)
